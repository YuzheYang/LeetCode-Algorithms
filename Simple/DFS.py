# Definition for a binary tree node.class TreeNode:    def __init__(self, x):        self.val = x        self.left = None        self.right = Noneclass Solution:    def maxDepth(self, root: TreeNode) -> int:        #  Depth first search        #         define a stack to save node        stack, max_depth = [(root, 1)], 0        #         save stack as (root, 1)        while stack and root:            #         start iteration with two variables            #         Pop one from stack to obtain its node and depth.            #         The first one is the root node 3            print(list(stack))            node, depth = stack.pop()            max_depth = max(max_depth, depth)            #         if node right or left is not Null, then the depth will add 1            if node.right:                stack.append((node.right, depth + 1))            if node.left:                stack.append((node.left, depth + 1))        return max_depthdef stringToTreeNode(input):    input = input.strip()    input = input[1:-1]    if not input:        return None    inputValues = [s.strip() for s in input.split(',')]    root = TreeNode(int(inputValues[0]))    nodeQueue = [root]    front = 0    index = 1    while index < len(inputValues):        node = nodeQueue[front]        front = front + 1        item = inputValues[index]        index = index + 1        if item != "null":            leftNumber = int(item)            node.left = TreeNode(leftNumber)            nodeQueue.append(node.left)        if index >= len(inputValues):            break        item = inputValues[index]        index = index + 1        if item != "null":            rightNumber = int(item)            node.right = TreeNode(rightNumber)            nodeQueue.append(node.right)    return rootdef main():    import sys    import io    def readlines():        for line in io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8'):            yield line.strip('\n')    lines = readlines()    while True:        try:            line = next(lines)            root = stringToTreeNode(line);            ret = Solution().maxDepth(root)            out = str(ret);            print(out)        except StopIteration:            breakif __name__ == '__main__':    main()